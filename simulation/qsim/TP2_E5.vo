// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 18.1.0 Build 625 09/12/2018 SJ Lite Edition"

// DATE "05/21/2020 18:31:34"

// 
// Device: Altera EP4CE22F17C6 Package FBGA256
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module TP2_E5 (
	PreLoad,
	CY,
	Jmp_Bits,
	W);
output 	PreLoad;
input 	CY;
input 	[2:0] Jmp_Bits;
input 	[15:0] W;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \PreLoad~output_o ;
wire \Jmp_Bits[2]~input_o ;
wire \W[15]~input_o ;
wire \W[14]~input_o ;
wire \W[13]~input_o ;
wire \W[12]~input_o ;
wire \inst|inst~0_combout ;
wire \W[11]~input_o ;
wire \W[10]~input_o ;
wire \W[9]~input_o ;
wire \W[8]~input_o ;
wire \inst|inst~1_combout ;
wire \W[7]~input_o ;
wire \W[6]~input_o ;
wire \W[5]~input_o ;
wire \W[4]~input_o ;
wire \inst|inst~2_combout ;
wire \W[3]~input_o ;
wire \W[2]~input_o ;
wire \W[1]~input_o ;
wire \W[0]~input_o ;
wire \inst|inst~3_combout ;
wire \inst|inst~4_combout ;
wire \Jmp_Bits[1]~input_o ;
wire \CY~input_o ;
wire \Jmp_Bits[0]~input_o ;
wire \inst|inst~5_combout ;
wire \inst|inst~6_combout ;


cycloneive_io_obuf \PreLoad~output (
	.i(\inst|inst~6_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\PreLoad~output_o ),
	.obar());
// synopsys translate_off
defparam \PreLoad~output .bus_hold = "false";
defparam \PreLoad~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Jmp_Bits[2]~input (
	.i(Jmp_Bits[2]),
	.ibar(gnd),
	.o(\Jmp_Bits[2]~input_o ));
// synopsys translate_off
defparam \Jmp_Bits[2]~input .bus_hold = "false";
defparam \Jmp_Bits[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[15]~input (
	.i(W[15]),
	.ibar(gnd),
	.o(\W[15]~input_o ));
// synopsys translate_off
defparam \W[15]~input .bus_hold = "false";
defparam \W[15]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[14]~input (
	.i(W[14]),
	.ibar(gnd),
	.o(\W[14]~input_o ));
// synopsys translate_off
defparam \W[14]~input .bus_hold = "false";
defparam \W[14]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[13]~input (
	.i(W[13]),
	.ibar(gnd),
	.o(\W[13]~input_o ));
// synopsys translate_off
defparam \W[13]~input .bus_hold = "false";
defparam \W[13]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[12]~input (
	.i(W[12]),
	.ibar(gnd),
	.o(\W[12]~input_o ));
// synopsys translate_off
defparam \W[12]~input .bus_hold = "false";
defparam \W[12]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~0 (
// Equation(s):
// \inst|inst~0_combout  = (\W[15]~input_o ) # ((\W[14]~input_o ) # ((\W[13]~input_o ) # (\W[12]~input_o )))

	.dataa(\W[15]~input_o ),
	.datab(\W[14]~input_o ),
	.datac(\W[13]~input_o ),
	.datad(\W[12]~input_o ),
	.cin(gnd),
	.combout(\inst|inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~0 .lut_mask = 16'hFFFE;
defparam \inst|inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \W[11]~input (
	.i(W[11]),
	.ibar(gnd),
	.o(\W[11]~input_o ));
// synopsys translate_off
defparam \W[11]~input .bus_hold = "false";
defparam \W[11]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[10]~input (
	.i(W[10]),
	.ibar(gnd),
	.o(\W[10]~input_o ));
// synopsys translate_off
defparam \W[10]~input .bus_hold = "false";
defparam \W[10]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[9]~input (
	.i(W[9]),
	.ibar(gnd),
	.o(\W[9]~input_o ));
// synopsys translate_off
defparam \W[9]~input .bus_hold = "false";
defparam \W[9]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[8]~input (
	.i(W[8]),
	.ibar(gnd),
	.o(\W[8]~input_o ));
// synopsys translate_off
defparam \W[8]~input .bus_hold = "false";
defparam \W[8]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~1 (
// Equation(s):
// \inst|inst~1_combout  = (\W[11]~input_o ) # ((\W[10]~input_o ) # ((\W[9]~input_o ) # (\W[8]~input_o )))

	.dataa(\W[11]~input_o ),
	.datab(\W[10]~input_o ),
	.datac(\W[9]~input_o ),
	.datad(\W[8]~input_o ),
	.cin(gnd),
	.combout(\inst|inst~1_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~1 .lut_mask = 16'hFFFE;
defparam \inst|inst~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \W[7]~input (
	.i(W[7]),
	.ibar(gnd),
	.o(\W[7]~input_o ));
// synopsys translate_off
defparam \W[7]~input .bus_hold = "false";
defparam \W[7]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[6]~input (
	.i(W[6]),
	.ibar(gnd),
	.o(\W[6]~input_o ));
// synopsys translate_off
defparam \W[6]~input .bus_hold = "false";
defparam \W[6]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[5]~input (
	.i(W[5]),
	.ibar(gnd),
	.o(\W[5]~input_o ));
// synopsys translate_off
defparam \W[5]~input .bus_hold = "false";
defparam \W[5]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[4]~input (
	.i(W[4]),
	.ibar(gnd),
	.o(\W[4]~input_o ));
// synopsys translate_off
defparam \W[4]~input .bus_hold = "false";
defparam \W[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~2 (
// Equation(s):
// \inst|inst~2_combout  = (\W[7]~input_o ) # ((\W[6]~input_o ) # ((\W[5]~input_o ) # (\W[4]~input_o )))

	.dataa(\W[7]~input_o ),
	.datab(\W[6]~input_o ),
	.datac(\W[5]~input_o ),
	.datad(\W[4]~input_o ),
	.cin(gnd),
	.combout(\inst|inst~2_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~2 .lut_mask = 16'hFFFE;
defparam \inst|inst~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \W[3]~input (
	.i(W[3]),
	.ibar(gnd),
	.o(\W[3]~input_o ));
// synopsys translate_off
defparam \W[3]~input .bus_hold = "false";
defparam \W[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[2]~input (
	.i(W[2]),
	.ibar(gnd),
	.o(\W[2]~input_o ));
// synopsys translate_off
defparam \W[2]~input .bus_hold = "false";
defparam \W[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[1]~input (
	.i(W[1]),
	.ibar(gnd),
	.o(\W[1]~input_o ));
// synopsys translate_off
defparam \W[1]~input .bus_hold = "false";
defparam \W[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \W[0]~input (
	.i(W[0]),
	.ibar(gnd),
	.o(\W[0]~input_o ));
// synopsys translate_off
defparam \W[0]~input .bus_hold = "false";
defparam \W[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~3 (
// Equation(s):
// \inst|inst~3_combout  = (\W[3]~input_o ) # ((\W[2]~input_o ) # ((\W[1]~input_o ) # (\W[0]~input_o )))

	.dataa(\W[3]~input_o ),
	.datab(\W[2]~input_o ),
	.datac(\W[1]~input_o ),
	.datad(\W[0]~input_o ),
	.cin(gnd),
	.combout(\inst|inst~3_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~3 .lut_mask = 16'hFFFE;
defparam \inst|inst~3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~4 (
// Equation(s):
// \inst|inst~4_combout  = (\inst|inst~0_combout ) # ((\inst|inst~1_combout ) # ((\inst|inst~2_combout ) # (\inst|inst~3_combout )))

	.dataa(\inst|inst~0_combout ),
	.datab(\inst|inst~1_combout ),
	.datac(\inst|inst~2_combout ),
	.datad(\inst|inst~3_combout ),
	.cin(gnd),
	.combout(\inst|inst~4_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~4 .lut_mask = 16'hFFFE;
defparam \inst|inst~4 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Jmp_Bits[1]~input (
	.i(Jmp_Bits[1]),
	.ibar(gnd),
	.o(\Jmp_Bits[1]~input_o ));
// synopsys translate_off
defparam \Jmp_Bits[1]~input .bus_hold = "false";
defparam \Jmp_Bits[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \CY~input (
	.i(CY),
	.ibar(gnd),
	.o(\CY~input_o ));
// synopsys translate_off
defparam \CY~input .bus_hold = "false";
defparam \CY~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Jmp_Bits[0]~input (
	.i(Jmp_Bits[0]),
	.ibar(gnd),
	.o(\Jmp_Bits[0]~input_o ));
// synopsys translate_off
defparam \Jmp_Bits[0]~input .bus_hold = "false";
defparam \Jmp_Bits[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~5 (
// Equation(s):
// \inst|inst~5_combout  = (\Jmp_Bits[1]~input_o  & ((\Jmp_Bits[0]~input_o  & (\CY~input_o )) # (!\Jmp_Bits[0]~input_o  & ((\W[15]~input_o ))))) # (!\Jmp_Bits[1]~input_o  & (((\Jmp_Bits[0]~input_o ))))

	.dataa(\CY~input_o ),
	.datab(\Jmp_Bits[1]~input_o ),
	.datac(\Jmp_Bits[0]~input_o ),
	.datad(\W[15]~input_o ),
	.cin(gnd),
	.combout(\inst|inst~5_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~5 .lut_mask = 16'hBCB0;
defparam \inst|inst~5 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \inst|inst~6 (
// Equation(s):
// \inst|inst~6_combout  = (\Jmp_Bits[2]~input_o  & ((\Jmp_Bits[1]~input_o  & ((\inst|inst~5_combout ))) # (!\Jmp_Bits[1]~input_o  & ((!\inst|inst~5_combout ) # (!\inst|inst~4_combout )))))

	.dataa(\Jmp_Bits[2]~input_o ),
	.datab(\inst|inst~4_combout ),
	.datac(\Jmp_Bits[1]~input_o ),
	.datad(\inst|inst~5_combout ),
	.cin(gnd),
	.combout(\inst|inst~6_combout ),
	.cout());
// synopsys translate_off
defparam \inst|inst~6 .lut_mask = 16'hA20A;
defparam \inst|inst~6 .sum_lutc_input = "datac";
// synopsys translate_on

assign PreLoad = \PreLoad~output_o ;

endmodule
