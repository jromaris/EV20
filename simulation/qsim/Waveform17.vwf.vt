// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/31/2020 20:58:54"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg branch;
reg clk;
reg hold;
reg [10:0] OLD_PC;
reg ret;
reg [9:0] S;
// wires                                               
wire [2:0] level;
wire [10:0] NEW_PC;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.branch(branch),
	.clk(clk),
	.hold(hold),
	.level(level),
	.NEW_PC(NEW_PC),
	.OLD_PC(OLD_PC),
	.ret(ret),
	.S(S)
);
initial 
begin 
#1000000 $finish;
end 

// branch
initial
begin
	branch = 1'b1;
	branch = #10000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// hold
initial
begin
	hold = 1'b1;
end 
// OLD_PC[ 10 ]
initial
begin
	OLD_PC[10] = 1'b0;
end 
// OLD_PC[ 9 ]
initial
begin
	OLD_PC[9] = 1'b0;
end 
// OLD_PC[ 8 ]
initial
begin
	OLD_PC[8] = 1'b0;
end 
// OLD_PC[ 7 ]
initial
begin
	OLD_PC[7] = 1'b0;
end 
// OLD_PC[ 6 ]
initial
begin
	OLD_PC[6] = 1'b0;
end 
// OLD_PC[ 5 ]
initial
begin
	OLD_PC[5] = 1'b0;
end 
// OLD_PC[ 4 ]
initial
begin
	OLD_PC[4] = 1'b0;
end 
// OLD_PC[ 3 ]
initial
begin
	OLD_PC[3] = 1'b0;
end 
// OLD_PC[ 2 ]
initial
begin
	OLD_PC[2] = 1'b0;
end 
// OLD_PC[ 1 ]
initial
begin
	OLD_PC[1] = 1'b1;
end 
// OLD_PC[ 0 ]
initial
begin
	OLD_PC[0] = 1'b0;
end 

// ret
initial
begin
	ret = 1'b0;
end 
// S[ 9 ]
initial
begin
	S[9] = 1'b0;
end 
// S[ 8 ]
initial
begin
	S[8] = 1'b0;
end 
// S[ 7 ]
initial
begin
	S[7] = 1'b0;
end 
// S[ 6 ]
initial
begin
	S[6] = 1'b0;
end 
// S[ 5 ]
initial
begin
	S[5] = 1'b1;
end 
// S[ 4 ]
initial
begin
	S[4] = 1'b0;
end 
// S[ 3 ]
initial
begin
	S[3] = 1'b0;
end 
// S[ 2 ]
initial
begin
	S[2] = 1'b0;
end 
// S[ 1 ]
initial
begin
	S[1] = 1'b0;
end 
// S[ 0 ]
initial
begin
	S[0] = 1'b0;
end 
endmodule

