// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/05/2020 00:20:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg clock23;
reg ENCRIPT_DECRIPT;
reg [15:0] treg_FromToW;
reg [15:0] INPUT;
reg [15:0] KEY;
// wires                                               
wire [15:0] A_ALUN_IN;
wire [15:0] A_LATCH;
wire [15:0] ALU_OUT;
wire [15:0] B_ALU_IN;
wire [15:0] B_LATCH;
wire BSR;
wire CARRY_IN;
wire [9:0] DEC_A_Addr;
wire [5:0] DEC_ALU_SH;
wire [5:0] DEC_B;
wire [5:0] DEC_C;
wire [5:0] DEC_JMP_OPCODE;
wire [10:0] DEC_Jump_PC;
wire [15:0] DEC_K_VAL;
wire [6:0] DEC_TYPE;
wire [1:0] E_out;
wire [15:0] ENC_DECR;
wire enc_or_dec;
wire [1:0] ENC_Out;
wire [1:0] Enc_Type_Out;
wire [15:0] FromToW;
wire Jump_Flag;
wire [21:0] Mem_Out;
wire [10:0] New_PC;
wire [15:0] OUTPUT;
wire [9:0] Pipe_A_Addr;
wire [5:0] Pipe_ALU_SH;
wire [5:0] Pipe_B_Reg;
wire [5:0] Pipe_C_Reg;
wire Pipe_Hold;
wire Pipe_K_Reg;
wire [1:0] Pipe_Mem_Reg;
wire [6:0] Pipe_Type_Reg;
wire PL;
wire RET;
wire [15:0] Shft_Out;
wire [1:0] TE_out;
wire W_ENABLE;
wire [15:0] W_OUT;
wire [15:0] W_REAL;

// assign statements (if any)                          
assign FromToW = treg_FromToW;
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.A_ALUN_IN(A_ALUN_IN),
	.A_LATCH(A_LATCH),
	.ALU_OUT(ALU_OUT),
	.B_ALU_IN(B_ALU_IN),
	.B_LATCH(B_LATCH),
	.BSR(BSR),
	.CARRY_IN(CARRY_IN),
	.Clock(Clock),
	.clock23(clock23),
	.DEC_A_Addr(DEC_A_Addr),
	.DEC_ALU_SH(DEC_ALU_SH),
	.DEC_B(DEC_B),
	.DEC_C(DEC_C),
	.DEC_JMP_OPCODE(DEC_JMP_OPCODE),
	.DEC_Jump_PC(DEC_Jump_PC),
	.DEC_K_VAL(DEC_K_VAL),
	.DEC_TYPE(DEC_TYPE),
	.E_out(E_out),
	.ENC_DECR(ENC_DECR),
	.enc_or_dec(enc_or_dec),
	.ENC_Out(ENC_Out),
	.Enc_Type_Out(Enc_Type_Out),
	.ENCRIPT_DECRIPT(ENCRIPT_DECRIPT),
	.FromToW(FromToW),
	.\INPUT (INPUT),
	.Jump_Flag(Jump_Flag),
	.KEY(KEY),
	.Mem_Out(Mem_Out),
	.New_PC(New_PC),
	.\OUTPUT (OUTPUT),
	.Pipe_A_Addr(Pipe_A_Addr),
	.Pipe_ALU_SH(Pipe_ALU_SH),
	.Pipe_B_Reg(Pipe_B_Reg),
	.Pipe_C_Reg(Pipe_C_Reg),
	.Pipe_Hold(Pipe_Hold),
	.Pipe_K_Reg(Pipe_K_Reg),
	.Pipe_Mem_Reg(Pipe_Mem_Reg),
	.Pipe_Type_Reg(Pipe_Type_Reg),
	.PL(PL),
	.RET(RET),
	.Shft_Out(Shft_Out),
	.TE_out(TE_out),
	.W_ENABLE(W_ENABLE),
	.W_OUT(W_OUT),
	.W_REAL(W_REAL)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #10000 1'b1;
	#10000;
end 

// clock23
always
begin
	clock23 = 1'b0;
	clock23 = #10000 1'b1;
	#10000;
end 

// ENCRIPT_DECRIPT
initial
begin
	ENCRIPT_DECRIPT = 1'b0;
end 
// FromToW[ 15 ]
initial
begin
	treg_FromToW[15] = 1'bZ;
end 
// FromToW[ 14 ]
initial
begin
	treg_FromToW[14] = 1'bZ;
end 
// FromToW[ 13 ]
initial
begin
	treg_FromToW[13] = 1'bZ;
end 
// FromToW[ 12 ]
initial
begin
	treg_FromToW[12] = 1'bZ;
end 
// FromToW[ 11 ]
initial
begin
	treg_FromToW[11] = 1'bZ;
end 
// FromToW[ 10 ]
initial
begin
	treg_FromToW[10] = 1'bZ;
end 
// FromToW[ 9 ]
initial
begin
	treg_FromToW[9] = 1'bZ;
end 
// FromToW[ 8 ]
initial
begin
	treg_FromToW[8] = 1'bZ;
end 
// FromToW[ 7 ]
initial
begin
	treg_FromToW[7] = 1'bZ;
end 
// FromToW[ 6 ]
initial
begin
	treg_FromToW[6] = 1'bZ;
end 
// FromToW[ 5 ]
initial
begin
	treg_FromToW[5] = 1'bZ;
end 
// FromToW[ 4 ]
initial
begin
	treg_FromToW[4] = 1'bZ;
end 
// FromToW[ 3 ]
initial
begin
	treg_FromToW[3] = 1'bZ;
end 
// FromToW[ 2 ]
initial
begin
	treg_FromToW[2] = 1'bZ;
end 
// FromToW[ 1 ]
initial
begin
	treg_FromToW[1] = 1'bZ;
end 
// FromToW[ 0 ]
initial
begin
	treg_FromToW[0] = 1'bZ;
end 
// \INPUT [ 15 ]
initial
begin
	INPUT[15] = 1'b0;
end 
// \INPUT [ 14 ]
initial
begin
	INPUT[14] = 1'b0;
end 
// \INPUT [ 13 ]
initial
begin
	INPUT[13] = 1'b0;
end 
// \INPUT [ 12 ]
initial
begin
	INPUT[12] = 1'b0;
end 
// \INPUT [ 11 ]
initial
begin
	INPUT[11] = 1'b0;
end 
// \INPUT [ 10 ]
initial
begin
	INPUT[10] = 1'b0;
end 
// \INPUT [ 9 ]
initial
begin
	INPUT[9] = 1'b0;
end 
// \INPUT [ 8 ]
initial
begin
	INPUT[8] = 1'b0;
end 
// \INPUT [ 7 ]
initial
begin
	INPUT[7] = 1'b0;
end 
// \INPUT [ 6 ]
initial
begin
	INPUT[6] = 1'b0;
end 
// \INPUT [ 5 ]
initial
begin
	INPUT[5] = 1'b0;
end 
// \INPUT [ 4 ]
initial
begin
	INPUT[4] = 1'b0;
end 
// \INPUT [ 3 ]
initial
begin
	INPUT[3] = 1'b0;
end 
// \INPUT [ 2 ]
initial
begin
	INPUT[2] = 1'b0;
end 
// \INPUT [ 1 ]
initial
begin
	INPUT[1] = 1'b0;
end 
// \INPUT [ 0 ]
initial
begin
	INPUT[0] = 1'b0;
end 
// KEY[ 15 ]
initial
begin
	KEY[15] = 1'b0;
end 
// KEY[ 14 ]
initial
begin
	KEY[14] = 1'b0;
end 
// KEY[ 13 ]
initial
begin
	KEY[13] = 1'b0;
end 
// KEY[ 12 ]
initial
begin
	KEY[12] = 1'b0;
end 
// KEY[ 11 ]
initial
begin
	KEY[11] = 1'b0;
end 
// KEY[ 10 ]
initial
begin
	KEY[10] = 1'b0;
end 
// KEY[ 9 ]
initial
begin
	KEY[9] = 1'b0;
end 
// KEY[ 8 ]
initial
begin
	KEY[8] = 1'b0;
end 
// KEY[ 7 ]
initial
begin
	KEY[7] = 1'b0;
end 
// KEY[ 6 ]
initial
begin
	KEY[6] = 1'b0;
end 
// KEY[ 5 ]
initial
begin
	KEY[5] = 1'b0;
end 
// KEY[ 4 ]
initial
begin
	KEY[4] = 1'b0;
end 
// KEY[ 3 ]
initial
begin
	KEY[3] = 1'b0;
end 
// KEY[ 2 ]
initial
begin
	KEY[2] = 1'b0;
end 
// KEY[ 1 ]
initial
begin
	KEY[1] = 1'b0;
end 
// KEY[ 0 ]
initial
begin
	KEY[0] = 1'b0;
end 
endmodule

