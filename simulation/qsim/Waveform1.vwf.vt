// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2020 18:31:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CY;
reg [2:0] Jmp_Bits;
reg [15:0] W;
// wires                                               
wire PreLoad;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.CY(CY),
	.Jmp_Bits(Jmp_Bits),
	.PreLoad(PreLoad),
	.W(W)
);
initial 
begin 
#1000000 $stop;
end 

// CY
initial
begin
	CY = 1'b0;
end 
// Jmp_Bits[ 2 ]
initial
begin
	Jmp_Bits[2] = 1'b1;
end 
// Jmp_Bits[ 1 ]
initial
begin
	Jmp_Bits[1] = 1'b0;
end 
// Jmp_Bits[ 0 ]
initial
begin
	Jmp_Bits[0] = 1'b1;
end 
// W[ 15 ]
initial
begin
	W[15] = 1'b0;
end 
// W[ 14 ]
initial
begin
	W[14] = 1'b0;
end 
// W[ 13 ]
initial
begin
	W[13] = 1'b0;
end 
// W[ 12 ]
initial
begin
	W[12] = 1'b0;
end 
// W[ 11 ]
initial
begin
	W[11] = 1'b0;
end 
// W[ 10 ]
initial
begin
	W[10] = 1'b0;
end 
// W[ 9 ]
initial
begin
	W[9] = 1'b0;
end 
// W[ 8 ]
initial
begin
	W[8] = 1'b0;
end 
// W[ 7 ]
initial
begin
	W[7] = 1'b0;
end 
// W[ 6 ]
initial
begin
	W[6] = 1'b1;
end 
// W[ 5 ]
initial
begin
	W[5] = 1'b0;
end 
// W[ 4 ]
initial
begin
	W[4] = 1'b0;
end 
// W[ 3 ]
initial
begin
	W[3] = 1'b0;
end 
// W[ 2 ]
initial
begin
	W[2] = 1'b0;
end 
// W[ 1 ]
initial
begin
	W[1] = 1'b0;
end 
// W[ 0 ]
initial
begin
	W[0] = 1'b0;
end 
endmodule

