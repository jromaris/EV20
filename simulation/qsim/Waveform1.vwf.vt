// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2020 17:40:53"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Mem_Clock;
reg pin_name1;
reg preload;
// wires                                               
wire [9:0] A_Addr_Reg;
wire [5:0] ALU_SH_Reg;
wire [5:0] B_Reg;
wire [5:0] C_Reg;
wire [2:0] Jmp_Opcode_Out;
wire [10:0] Jump_PC_Val;
wire K_Reg;
wire [15:0] K_Val_Out;
wire [21:0] Mem_Out;
wire [1:0] Mem_Reg;
wire [5:0] MUX1;
wire [5:0] MUX2;
wire [10:0] New_PC;
wire select;
wire [4:0] TEMP_C;
wire [6:0] Type_Reg;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.A_Addr_Reg(A_Addr_Reg),
	.ALU_SH_Reg(ALU_SH_Reg),
	.B_Reg(B_Reg),
	.C_Reg(C_Reg),
	.Clock(Clock),
	.Jmp_Opcode_Out(Jmp_Opcode_Out),
	.Jump_PC_Val(Jump_PC_Val),
	.K_Reg(K_Reg),
	.K_Val_Out(K_Val_Out),
	.Mem_Clock(Mem_Clock),
	.Mem_Out(Mem_Out),
	.Mem_Reg(Mem_Reg),
	.MUX1(MUX1),
	.MUX2(MUX2),
	.New_PC(New_PC),
	.pin_name1(pin_name1),
	.preload(preload),
	.select(select),
	.TEMP_C(TEMP_C),
	.Type_Reg(Type_Reg)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #25000 1'b1;
	#25000;
end 

// Mem_Clock
always
begin
	Mem_Clock = 1'b0;
	Mem_Clock = #25000 1'b1;
	#25000;
end 

// pin_name1
initial
begin
	pin_name1 = 1'b0;
end 

// preload
initial
begin
	preload = 1'b0;
end 
endmodule

