// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2020 14:32:17"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Hold;
reg [21:0] Instruction;
reg Mem_Clock;
// wires                                               
wire [9:0] A_Addr_Reg_Out;
wire [5:0] ALU_SH_Reg_Out;
wire [5:0] B_Reg_Out;
wire [5:0] C_Reg_Out;
wire [2:0] Jmp_Opcode_Out;
wire [10:0] Jump_PC_Val;
wire K_Reg_Out;
wire [15:0] K_Val_Out;
wire [1:0] Mem_Reg_Out;
wire [6:0] Type_Reg_Out;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.A_Addr_Reg_Out(A_Addr_Reg_Out),
	.ALU_SH_Reg_Out(ALU_SH_Reg_Out),
	.B_Reg_Out(B_Reg_Out),
	.C_Reg_Out(C_Reg_Out),
	.Clock(Clock),
	.Hold(Hold),
	.Instruction(Instruction),
	.Jmp_Opcode_Out(Jmp_Opcode_Out),
	.Jump_PC_Val(Jump_PC_Val),
	.K_Reg_Out(K_Reg_Out),
	.K_Val_Out(K_Val_Out),
	.Mem_Clock(Mem_Clock),
	.Mem_Reg_Out(Mem_Reg_Out),
	.Type_Reg_Out(Type_Reg_Out)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// Hold
initial
begin
	Hold = 1'b0;
end 
// Instruction[ 21 ]
initial
begin
	Instruction[21] = 1'b0;
end 
// Instruction[ 20 ]
initial
begin
	Instruction[20] = 1'b0;
end 
// Instruction[ 19 ]
initial
begin
	Instruction[19] = 1'b0;
	Instruction[19] = #50000 1'b1;
	Instruction[19] = #100000 1'b0;
end 
// Instruction[ 18 ]
initial
begin
	Instruction[18] = 1'b0;
	Instruction[18] = #50000 1'b1;
	Instruction[18] = #100000 1'b0;
end 
// Instruction[ 17 ]
initial
begin
	Instruction[17] = 1'b0;
end 
// Instruction[ 16 ]
initial
begin
	Instruction[16] = 1'b0;
end 
// Instruction[ 15 ]
initial
begin
	Instruction[15] = 1'b0;
end 
// Instruction[ 14 ]
initial
begin
	Instruction[14] = 1'b0;
end 
// Instruction[ 13 ]
initial
begin
	Instruction[13] = 1'b0;
end 
// Instruction[ 12 ]
initial
begin
	Instruction[12] = 1'b0;
end 
// Instruction[ 11 ]
initial
begin
	Instruction[11] = 1'b0;
end 
// Instruction[ 10 ]
initial
begin
	Instruction[10] = 1'b0;
end 
// Instruction[ 9 ]
initial
begin
	Instruction[9] = 1'b0;
end 
// Instruction[ 8 ]
initial
begin
	Instruction[8] = 1'b0;
end 
// Instruction[ 7 ]
initial
begin
	Instruction[7] = 1'b0;
end 
// Instruction[ 6 ]
initial
begin
	Instruction[6] = 1'b0;
end 
// Instruction[ 5 ]
initial
begin
	Instruction[5] = 1'b0;
end 
// Instruction[ 4 ]
initial
begin
	Instruction[4] = 1'b0;
end 
// Instruction[ 3 ]
initial
begin
	Instruction[3] = 1'b0;
end 
// Instruction[ 2 ]
initial
begin
	Instruction[2] = 1'b0;
end 
// Instruction[ 1 ]
initial
begin
	Instruction[1] = 1'b0;
end 
// Instruction[ 0 ]
initial
begin
	Instruction[0] = 1'b0;
end 

// Mem_Clock
always
begin
	Mem_Clock = 1'b0;
	Mem_Clock = #25000 1'b1;
	#25000;
end 
endmodule

