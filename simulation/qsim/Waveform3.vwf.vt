// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/21/2020 22:40:31"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Hold;
reg [21:0] Instr_Mem;
// wires                                               
wire [9:0] A_Addr_Reg;
wire [5:0] ALU_SH_Reg;
wire [5:0] B_Reg;
wire [5:0] C_Reg;
wire [2:0] Jmp_Opcode;
wire [10:0] Jump_PC_Val;
wire K_Reg;
wire [15:0] K_Val;
wire [1:0] Mem_Reg;
wire [6:0] MIR_IN;
wire [21:0] Out_Instr_Reg;
wire [6:0] Type_Reg;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.A_Addr_Reg(A_Addr_Reg),
	.ALU_SH_Reg(ALU_SH_Reg),
	.B_Reg(B_Reg),
	.C_Reg(C_Reg),
	.Clock(Clock),
	.Hold(Hold),
	.Instr_Mem(Instr_Mem),
	.Jmp_Opcode(Jmp_Opcode),
	.Jump_PC_Val(Jump_PC_Val),
	.K_Reg(K_Reg),
	.K_Val(K_Val),
	.Mem_Reg(Mem_Reg),
	.MIR_IN(MIR_IN),
	.Out_Instr_Reg(Out_Instr_Reg),
	.Type_Reg(Type_Reg)
);
initial 
begin 
#1000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #25000 1'b1;
	#25000;
end 

// Hold
initial
begin
	Hold = 1'b0;
end 
// Instr_Mem[ 21 ]
initial
begin
	Instr_Mem[21] = 1'b1;
end 
// Instr_Mem[ 20 ]
initial
begin
	Instr_Mem[20] = 1'b1;
end 
// Instr_Mem[ 19 ]
initial
begin
	Instr_Mem[19] = 1'b0;
end 
// Instr_Mem[ 18 ]
initial
begin
	Instr_Mem[18] = 1'b0;
end 
// Instr_Mem[ 17 ]
initial
begin
	Instr_Mem[17] = 1'b0;
end 
// Instr_Mem[ 16 ]
initial
begin
	Instr_Mem[16] = 1'b0;
end 
// Instr_Mem[ 15 ]
initial
begin
	Instr_Mem[15] = 1'b0;
end 
// Instr_Mem[ 14 ]
initial
begin
	Instr_Mem[14] = 1'b0;
end 
// Instr_Mem[ 13 ]
initial
begin
	Instr_Mem[13] = 1'b0;
end 
// Instr_Mem[ 12 ]
initial
begin
	Instr_Mem[12] = 1'b0;
end 
// Instr_Mem[ 11 ]
initial
begin
	Instr_Mem[11] = 1'b0;
end 
// Instr_Mem[ 10 ]
initial
begin
	Instr_Mem[10] = 1'b0;
end 
// Instr_Mem[ 9 ]
initial
begin
	Instr_Mem[9] = 1'b0;
end 
// Instr_Mem[ 8 ]
initial
begin
	Instr_Mem[8] = 1'b0;
end 
// Instr_Mem[ 7 ]
initial
begin
	Instr_Mem[7] = 1'b0;
end 
// Instr_Mem[ 6 ]
initial
begin
	Instr_Mem[6] = 1'b0;
end 
// Instr_Mem[ 5 ]
initial
begin
	Instr_Mem[5] = 1'b0;
end 
// Instr_Mem[ 4 ]
initial
begin
	Instr_Mem[4] = 1'b0;
end 
// Instr_Mem[ 3 ]
initial
begin
	Instr_Mem[3] = 1'b0;
end 
// Instr_Mem[ 2 ]
initial
begin
	Instr_Mem[2] = 1'b0;
end 
// Instr_Mem[ 1 ]
initial
begin
	Instr_Mem[1] = 1'b0;
end 
// Instr_Mem[ 0 ]
initial
begin
	Instr_Mem[0] = 1'b0;
end 
endmodule

