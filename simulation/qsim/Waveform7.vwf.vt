// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/28/2020 18:05:19"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          TP2_E5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TP2_E5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] ALU_B_IN;
reg Clock;
reg hold;
reg [15:0] KMUX_Reg_Bank_IN;
reg Mem_Clock;
reg [15:0] W;
// wires                                               
wire [5:0] DEC_ALU_SH;
wire [5:0] DEC_B;
wire [5:0] DEC_C;
wire [10:0] DEC_Jump_PC;
wire [15:0] DEC_K_VAL;
wire [6:0] DEC_TYPE;
wire [21:0] Mem_Out;
wire [10:0] New_PC;
wire [9:0] Pipe_A_Addr;
wire [5:0] Pipe_ALU_SH;
wire [5:0] Pipe_B_Reg;
wire [5:0] Pipe_C_Reg;
wire Pipe_Hold;
wire Pipe_K_Reg;
wire [1:0] Pipe_Mem_Reg;
wire [6:0] Pipe_Type_Reg;
wire PreLoad;
wire [15:0] Shft_Out;

// assign statements (if any)                          
TP2_E5 i1 (
// port map - connection between master ports and signals/registers   
	.ALU_B_IN(ALU_B_IN),
	.Clock(Clock),
	.DEC_ALU_SH(DEC_ALU_SH),
	.DEC_B(DEC_B),
	.DEC_C(DEC_C),
	.DEC_Jump_PC(DEC_Jump_PC),
	.DEC_K_VAL(DEC_K_VAL),
	.DEC_TYPE(DEC_TYPE),
	.hold(hold),
	.KMUX_Reg_Bank_IN(KMUX_Reg_Bank_IN),
	.Mem_Clock(Mem_Clock),
	.Mem_Out(Mem_Out),
	.New_PC(New_PC),
	.Pipe_A_Addr(Pipe_A_Addr),
	.Pipe_ALU_SH(Pipe_ALU_SH),
	.Pipe_B_Reg(Pipe_B_Reg),
	.Pipe_C_Reg(Pipe_C_Reg),
	.Pipe_Hold(Pipe_Hold),
	.Pipe_K_Reg(Pipe_K_Reg),
	.Pipe_Mem_Reg(Pipe_Mem_Reg),
	.Pipe_Type_Reg(Pipe_Type_Reg),
	.PreLoad(PreLoad),
	.Shft_Out(Shft_Out),
	.W(W)
);
initial 
begin 
#1000000 $finish;
end 
// ALU_B_IN[ 15 ]
initial
begin
	ALU_B_IN[15] = 1'b0;
end 
// ALU_B_IN[ 14 ]
initial
begin
	ALU_B_IN[14] = 1'b0;
end 
// ALU_B_IN[ 13 ]
initial
begin
	ALU_B_IN[13] = 1'b0;
end 
// ALU_B_IN[ 12 ]
initial
begin
	ALU_B_IN[12] = 1'b0;
end 
// ALU_B_IN[ 11 ]
initial
begin
	ALU_B_IN[11] = 1'b0;
end 
// ALU_B_IN[ 10 ]
initial
begin
	ALU_B_IN[10] = 1'b0;
end 
// ALU_B_IN[ 9 ]
initial
begin
	ALU_B_IN[9] = 1'b0;
end 
// ALU_B_IN[ 8 ]
initial
begin
	ALU_B_IN[8] = 1'b0;
end 
// ALU_B_IN[ 7 ]
initial
begin
	ALU_B_IN[7] = 1'b0;
end 
// ALU_B_IN[ 6 ]
initial
begin
	ALU_B_IN[6] = 1'b0;
end 
// ALU_B_IN[ 5 ]
initial
begin
	ALU_B_IN[5] = 1'b0;
end 
// ALU_B_IN[ 4 ]
initial
begin
	ALU_B_IN[4] = 1'b0;
end 
// ALU_B_IN[ 3 ]
initial
begin
	ALU_B_IN[3] = 1'b0;
end 
// ALU_B_IN[ 2 ]
initial
begin
	ALU_B_IN[2] = 1'b0;
end 
// ALU_B_IN[ 1 ]
initial
begin
	ALU_B_IN[1] = 1'b0;
end 
// ALU_B_IN[ 0 ]
initial
begin
	ALU_B_IN[0] = 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #25000 1'b1;
	#25000;
end 

// hold
initial
begin
	hold = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 15 ]
initial
begin
	KMUX_Reg_Bank_IN[15] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 14 ]
initial
begin
	KMUX_Reg_Bank_IN[14] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 13 ]
initial
begin
	KMUX_Reg_Bank_IN[13] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 12 ]
initial
begin
	KMUX_Reg_Bank_IN[12] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 11 ]
initial
begin
	KMUX_Reg_Bank_IN[11] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 10 ]
initial
begin
	KMUX_Reg_Bank_IN[10] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 9 ]
initial
begin
	KMUX_Reg_Bank_IN[9] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 8 ]
initial
begin
	KMUX_Reg_Bank_IN[8] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 7 ]
initial
begin
	KMUX_Reg_Bank_IN[7] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 6 ]
initial
begin
	KMUX_Reg_Bank_IN[6] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 5 ]
initial
begin
	KMUX_Reg_Bank_IN[5] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 4 ]
initial
begin
	KMUX_Reg_Bank_IN[4] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 3 ]
initial
begin
	KMUX_Reg_Bank_IN[3] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 2 ]
initial
begin
	KMUX_Reg_Bank_IN[2] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 1 ]
initial
begin
	KMUX_Reg_Bank_IN[1] = 1'b0;
end 
// KMUX_Reg_Bank_IN[ 0 ]
initial
begin
	KMUX_Reg_Bank_IN[0] = 1'b0;
end 

// Mem_Clock
always
begin
	Mem_Clock = 1'b0;
	Mem_Clock = #25000 1'b1;
	#25000;
end 
// W[ 15 ]
initial
begin
	W[15] = 1'b0;
end 
// W[ 14 ]
initial
begin
	W[14] = 1'b0;
end 
// W[ 13 ]
initial
begin
	W[13] = 1'b0;
end 
// W[ 12 ]
initial
begin
	W[12] = 1'b0;
end 
// W[ 11 ]
initial
begin
	W[11] = 1'b0;
end 
// W[ 10 ]
initial
begin
	W[10] = 1'b0;
end 
// W[ 9 ]
initial
begin
	W[9] = 1'b0;
end 
// W[ 8 ]
initial
begin
	W[8] = 1'b0;
end 
// W[ 7 ]
initial
begin
	W[7] = 1'b0;
end 
// W[ 6 ]
initial
begin
	W[6] = 1'b0;
end 
// W[ 5 ]
initial
begin
	W[5] = 1'b0;
end 
// W[ 4 ]
initial
begin
	W[4] = 1'b0;
end 
// W[ 3 ]
initial
begin
	W[3] = 1'b0;
end 
// W[ 2 ]
initial
begin
	W[2] = 1'b0;
end 
// W[ 1 ]
initial
begin
	W[1] = 1'b0;
end 
// W[ 0 ]
initial
begin
	W[0] = 1'b0;
end 
endmodule

