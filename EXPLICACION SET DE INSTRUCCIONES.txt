El + significa que lo pase a la memoria
el // es que introduce un conjunto de direcciones de memoria que aluden a la misma instruccion
el ** es que la direccion esta repetida y ya hay otra instruccion que hace lo que se queria

//1 0 0 x x x x   40               x x x x x x x JMP X Unconditional Jump PC = X

+1 0 0 0 0 0 0  40
+1 0 0 0 0 0 1  41
+1 0 0 0 0 1 0  42
+1 0 0 0 0 1 1  43
+1 0 0 0 1 0 0  44
+1 0 0 0 1 0 1  45
+1 0 0 0 1 1 0  46
+1 0 0 0 1 1 1  47
+1 0 0 1 0 0 0  48
+1 0 0 1 0 0 1  49
+1 0 0 1 0 1 0  4A
+1 0 0 1 0 1 1  4B
+1 0 0 1 1 0 0  4C
+1 0 0 1 1 0 1  4D
+1 0 0 1 1 1 0  4E
+1 0 0 1 1 1 1  4F

//1 0 1 x x x x   50               x x x x x x x JZE X Jump if Working Register is Zero IF W=0 THEN PC=X

+1 0 1 0 0 0 0  50
+1 0 1 0 0 0 1  51
+1 0 1 0 0 1 0  52
+1 0 1 0 0 1 1  53
+1 0 1 0 1 0 0  54
+1 0 1 0 1 0 1  55
+1 0 1 0 1 1 0  56
+1 0 1 0 1 1 1  57
+1 0 1 1 0 0 0  58
+1 0 1 1 0 0 1  59
+1 0 1 1 0 1 0  5A
+1 0 1 1 0 1 1  5B
+1 0 1 1 1 0 0  5C
+1 0 1 1 1 0 1  5D
+1 0 1 1 1 1 0  5E
+1 0 1 1 1 1 1  5F

//1 1 0 x x x x   60               x x x x x x x JNE X Jump if Working Register is Negative IF W15=0 THEN PC=X

+1 1 0 0 0 0 0  60
+1 1 0 0 0 0 1  61
+1 1 0 0 0 1 0  62
+1 1 0 0 0 1 1  63
+1 1 0 0 1 0 0  64
+1 1 0 0 1 0 1  65
+1 1 0 0 1 1 0  66
+1 1 0 0 1 1 1  67
+1 1 0 1 0 0 0  68
+1 1 0 1 0 0 1  69
+1 1 0 1 0 1 0  6A
+1 1 0 1 0 1 1  6B
+1 1 0 1 1 0 0  6C
+1 1 0 1 1 0 1  6D
+1 1 0 1 1 1 0  6E
+1 1 0 1 1 1 1  6F

//1 1 1 x x x x   70               x x x x x x x JCY X Jump if Carry IF CY THEN PC=X

+1 1 1 0 0 0 0  70
+1 1 1 0 0 0 1  71
+1 1 1 0 0 1 0  72
+1 1 1 0 0 1 1  73
+1 1 1 0 1 0 0  74
+1 1 1 0 1 0 1  75
+1 1 1 0 1 1 0  76
+1 1 1 0 1 1 1  77
+1 1 1 1 0 0 0  78
+1 1 1 1 0 0 1  79
+1 1 1 1 0 1 0  7A
+1 1 1 1 0 1 1  7B
+1 1 1 1 1 0 0  7C
+1 1 1 1 1 0 1  7D
+1 1 1 1 1 1 0  7E
+1 1 1 1 1 1 1  7F

//0 1 0 0 y y y                  y y y y y y y MOM Y,W Move Working Register to Memory M(Y) = W

+0 1 0 0 0 0 0   20
+0 1 0 0 0 0 1   21
+0 1 0 0 0 1 0   22
+0 1 0 0 0 1 1   23
+0 1 0 0 1 0 0   24
+0 1 0 0 1 0 1   25
+0 1 0 0 1 1 0   26
+0 1 0 0 1 1 1   27

//0 1 0 1 y y y                  y y y y y y y MOM W,Y Move Memory to Working Register W = M(Y)

+0 1 0 1 0 0 0  28
+0 1 0 1 0 0 1  29
+0 1 0 1 0 1 0  2A
+0 1 0 1 0 1 1  2B
+0 1 0 1 1 0 0  2C
+0 1 0 1 1 0 1  2D
+0 1 0 1 1 1 0  2E
+0 1 0 1 1 1 1  2F

//0 1 1 0 i i i                  i i j j j j j ADW Ri,Rj Add with Carry Reg. J with Working Reg. to Reg. I Ri= W + Rj + CY

+0 1 1 0 0 0 0  30  
+0 1 1 0 0 0 1  31
+0 1 1 0 0 1 0  32
+0 1 1 0 0 1 1  33
+0 1 1 0 1 0 0  34
+0 1 1 0 1 0 1  35
+0 1 1 0 1 1 0  36

//0 1 1 1 s s s                  s s s s s s s BSR S Unconditional Branch (Relative) to Subroutine S Save PC; PC= PC + S

+0 1 1 1 0 0 0  38
+0 1 1 1 0 0 1  39
+0 1 1 1 0 1 0  3A
+0 1 1 1 0 1 1  3B
+0 1 1 1 1 0 0  3C
+0 1 1 1 1 0 1  3D
+0 1 1 1 1 1 0  3E
+0 1 1 1 1 1 1  3F

//0 0 1 0 i i i                  i i j j j j j MOV Ri,Rj Move Register J to Register I {Ri, Rj: 0 a 27} Ri = Rj

+0 0 1 0 0 0 0  10
+0 0 1 0 0 0 1  11
+0 0 1 0 0 1 0  12
+0 0 1 0 0 1 1  13
+0 0 1 0 1 0 0  14
+0 0 1 0 1 0 1  15
+0 0 1 0 1 1 0  16

+0 0 1 0 1 1 1  17                  1 i j j j j j MOV POi,Rj Move Register J to Output Port i POi = Rj

No es necesario porque lo incluye la otra instrucción (MOV Ri,Rj)
**0 0 1 0 i i i                  i i 1 1 1 0 j MOV Ri,PIj Move Input Port j to Register I Ri = PIj

**0 0 1 0 0 0 0
**0 0 1 0 0 0 1
**0 0 1 0 0 1 0
**0 0 1 0 0 1 1
**0 0 1 0 1 0 0
**0 0 1 0 1 0 1
**0 0 1 0 1 1 0

No es necesario porque lo incluye la otra instrucción (MOV POi,Rj)
**0 0 1 0 1 1 1                  1 i 1 1 1 0 j MOV POi,PIj Move Input Port J to Output Port I POi = PIj


//0 0 1 1 i i i                  i i 0 0 0 0 0 MOV Ri,W Move Working Register to Register I Ri = W

0 0 1 1 0 0 0  18
0 0 1 1 0 0 1  19
0 0 1 1 0 1 0  1A
0 0 1 1 0 1 1  1B
0 0 1 1 1 0 0  1C
0 0 1 1 1 0 1  1D
0 0 1 1 1 1 0  1E


+0 0 1 1 1 1 1  1F                1 i 0 0 0 0 0 MOV POi,W Move Working Register to Output Port I POi = W

//0 0 0 1 0 0 k                  k k k k k k k MOKL W,#K Move Constant to Working Register W = K

+0 0 0 1 0 0 0  08
+0 0 0 1 0 0 1  09

//0 0 0 1 0 1 k                  k k k k k k k ANKL W,#K AND Constant with Working Register W= W & K

+0 0 0 1 0 1 0  0A
+0 0 0 1 0 1 1  0B

//0 0 0 1 1 0 k                  k k k k k k k ORKL W,#K OR Constant with Working Register W= W OR K

+0 0 0 1 1 0 0  0C
+0 0 0 1 1 0 1  0D

//0 0 0 1 1 1 k                  k k k k k k k ADKL W,#K ADD with Carry Constant with Working Register W= W + K + CY

+0 0 0 1 1 1 0  0E
+0 0 0 1 1 1 1  0F

ESTO ESTÁ MAL HAY QUE CORREGIRLO (TODO LO ASOCIADO A K HIGH)

//1 0 0 1 0 0 k                  k k k k k k k MOKH W,#K Move Constant to Working Register W = K

+1 0 0 1 0 0 0  48
+1 0 0 1 0 0 1  49

//1 0 0 1 0 1 k                  k k k k k k k ANKH W,#K AND Constant with Working Register W= W & K

+1 0 0 1 0 1 0  4A
+1 0 0 1 0 1 1  4B

//1 0 0 1 1 0 k                  k k k k k k k ORKH W,#K OR Constant with Working Register W= W OR K

+1 0 0 1 1 0 0  4C
+1 0 0 1 1 0 1  4D

//1 0 0 1 1 1 k                  k k k k k k k ADKH W,#K ADD with Carry Constant with Working Register W= W + K + CY

+1 0 0 1 1 1 0  4E
+1 0 0 1 1 1 1  4F

ACÁ TERMINA LO QUE ESTÁ MAL

+0 0 0 0 1 0 0  04                0 0 j j j j j MOV W,Rj Move Register J to Working Register W= Rj

No es necesario porque lo incluye la otra instrucción (MOV W,Rj)
**0 0 0 0 1 0 0                  0 0 1 1 1 0 j MOV W,PIj Move Input Port J to Working Register W= PIj

+0 0 0 0 1 0 1  05                  0 0 j j j j j ANR W,Rj AND Register J with Working Register W= W & Rj
+0 0 0 0 1 1 0  06                  0 0 j j j j j ORR W,Rj OR Register J with Working Register W= W OR Rj
+0 0 0 0 1 1 1  07                  0 0 j j j j j ADR W,Rj ADD with Carry Register J with Working Register W= W + Rj + CY
+0 0 0 0 0 0 0  00                  0 0 0 0 0 0 0 CPL W Complement Working Register W= /W
+0 0 0 0 0 0 1  01                  0 0 0 0 0 0 0 CLR CY Clear Carry CY= 0
+0 0 0 0 0 1 0  02                  0 0 0 0 0 0 0 SET CY Set Carry CY= 1
+0 0 0 0 0 1 1  03                  0 0 0 0 0 0 0 RET Return From Subroutine PC= Latest Stored PC {+ 1}